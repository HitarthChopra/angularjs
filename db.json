{
	"data": [{
			"title": "Angular",
			"tags": [
				"Angular",
				"AngularJS",
				"Angular1"
			],
			"highlights": "Angular is a platform that makes it easy to build applications with the web.",
			"detail": "Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. Angular empowers developers to build applications that live on the web, mobile, or the desktop",
			"id": 1
		},
		{
			"title": "Modules",
			"tags": [
				"Modules",
				"NgModule"
			],
			"highlights": "Angular apps are modular and Angular has its own modularity system called NgModules.",
			"detail": "While the root module may be the only module in a small application, most apps have many more feature modules, each a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.",
			"id": 2
		},
		{
			"title": "Routing",
			"tags": [
				"Routing,Navigation"
			],
			"highlights": "An Angular best practice is to load and configure the router in a separate, top-level module that is dedicated to routing and imported by the root AppModule",
			"detail": "The method is called forRoot() because you configure the router at the application's root level. The forRoot() method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.",
			"id": 3
		},
		{
			"title": "Reactive Forms",
			"tags": [
				"Forms",
				"Reactive"
			],
			"highlights": "Reactive forms is an Angular technique for creating forms in a reactive style. ",
			"detail": "Angular reactive forms facilitate a reactive style of programming that favors explicit management of the data flowing between a non-UI data model (typically retrieved from a server) and a UI-oriented form model that retains the states and values of the HTML controls on screen. ",
			"id": 4
		},
		{
			"title": "Bootstrapping",
			"tags": [
				"Bootstrapping",
				"Bootstrap"
			],
			"highlights": "An Angular Module (NgModule) class describes how the application parts fit together. Every application has at least one Angular Module, the root module that you bootstrap to launch the application.",
			"detail": "You launch the application by bootstrapping the root AppModule. Among other things, the bootstrapping process creates the component(s) listed in the bootstrap array and inserts each one into the browser DOM.Each bootstrapped component is the base of its own tree of components. Inserting a bootstrapped component usually triggers a cascade of component creations that fill out that tree.",
			"id": 5
		},
		{
			"title": "Dependency Injection",
			"tags": [
				"Dependency",
				"Injection"
			],
			"highlights": "Dependency injection is an important application design pattern. It's used so widely that almost everyone just calls it DI.",
			"detail": "Dependency Injection (DI) is a way to create objects that depend upon other objects. A Dependency Injection system supplies the dependent objects (called the dependencies) when it creates an instance of an object.",
			"id": 6
		},
		{
			"title": "Testing",
			"tags": [
				"Testing"
			],
			"highlights": "This guide offers tips and techniques for testing Angular applications. Though this page includes some general testing principles and techniques, the focus is on testing applications written with Angular.",
			"detail": "You can test components in isolation as well. However, isolated unit tests don't reveal how components interact with Angular. In particular, they can't reveal how a component class interacts with its own template or with other components.",
			"id": 7
		}
	]
}